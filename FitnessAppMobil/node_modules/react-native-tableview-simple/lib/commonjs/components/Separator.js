"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importStar(require("react"));
const react_native_1 = require("react-native");
const Theme_1 = require("./Theme");
const Separator = ({ backgroundColor, tintColor, isHidden = false, insetLeft = 15, insetRight = 0, withSafeAreaView = react_native_1.Platform.OS === 'ios'
    ? parseInt(`${react_native_1.Platform.Version}`, 10) <= 10
        ? false
        : true
    : true, }) => {
    const theme = react_1.useContext(Theme_1.ThemeContext);
    const localStyles = {
        separator: [
            styles.separator,
            { backgroundColor: backgroundColor || theme.colors.background },
        ],
        separatorInner: [
            styles.separatorInner,
            {
                backgroundColor: isHidden
                    ? 'transparent'
                    : tintColor || theme.colors.separatorColor,
                marginLeft: insetLeft,
                marginRight: insetRight,
            },
        ],
    };
    if (withSafeAreaView) {
        return (<react_native_1.SafeAreaView style={localStyles.separator}>
        <react_native_1.View style={localStyles.separatorInner}/>
      </react_native_1.SafeAreaView>);
    }
    return (<react_native_1.View style={localStyles.separator}>
      <react_native_1.View style={localStyles.separatorInner}/>
    </react_native_1.View>);
};
const styles = react_native_1.StyleSheet.create({
    separator: {},
    separatorInner: {
        height: react_native_1.StyleSheet.hairlineWidth,
    },
});
exports.default = Separator;
//# sourceMappingURL=Separator.js.map